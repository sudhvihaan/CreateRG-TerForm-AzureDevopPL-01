# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

    
stages:
  - stage: 
    jobs:
      - job: terraform_install
        steps:
           - task: TerraformInstaller@1
             inputs:
              terraformVersion: 'latest'
            
      
           - task: TerraformTaskV2@2
             displayName: TF_Init
             inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'throntonServiceConnection'
              backendAzureRmResourceGroupName: 'thomasthorntoncloud'
              backendAzureRmStorageAccountName: 'thotfstate678678'
              backendAzureRmContainerName: 'exampletfstate'
              backendAzureRmKey: 'terrafor.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
           - task: TerraformTaskV2@2
             displayName: TF_Plan
             inputs:
               provider: 'azurerm'
               command: 'plan'
               environmentServiceNameAzureRM: 'throntonServiceConnection'
               workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
               environmentServiceNameAzureRM: throntonServiceConnection
               
           - task: TerraformTaskV3@3
             displayName: TF_Apply
             inputs:
               provider: 'azurerm'
               command: 'apply'
               environmentServiceNameAzureRM: 'throntonServiceConnection'
               workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
               environmentServiceNameAzureRM: throntonServiceConnection
               
              

            
    

